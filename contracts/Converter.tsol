pragma ever-solidity >= 0.71.0;

///////////////
// Constants //
///////////////
uint128 constant MAXIMUM_RECEIVERS = 16;
uint128 constant VALID_RECEIVERS_TOTAL_SHARE = 1000000000;

////////////
// Errors //
////////////
uint16 constant ONLY_OWNER_ERROR = 101;
uint16 constant INVALID_RECEIVERS_TOTAL_SHARE_ERROR = 102;
uint16 constant TOO_MUCH_RECEIVERS_ERROR = 103;

////////////////
// Structures //
////////////////
struct Receiver {
    address wallet;
    /**
     * 1_000_000_000 means 100% of received COINs will be sent to the wallet
     *   500_000_000 means 50%  of received COINs will be sent to the wallet
     *   100_000_000 means 10%  of received COINs will be sent to the wallet
     */
    uint32 share;
}

/**
 * Convert COINs to TOKENs and send COINs to receivers
 *
 * Legend
 *   COIN  - native blockchain coin e.g. EVER
 *   TOKEN - TIP3 token implementation https://github.com/broxus/tip3
 *
 * TIP3 standard
 *   https://github.com/everscale-org/docs/blob/main/src/standard/TIP-3/1.md
 *   https://github.com/everscale-org/docs/blob/main/src/standard/TIP-3/2.md
 */
contract Converter {
    ///////////////
    // Modifiers //
    ///////////////
    modifier accept {
        tvm.accept();
        _;
    }

    modifier onlyOwner {
        require(_owner == msg.sender, ONLY_OWNER_ERROR);
        _;
    }

    modifier reserveBalance (uint128 balance, address recipient) {
        tvm.rawReserve(balance, 2);
        _;
        recipient.transfer(0, false, 128);
    }

    modifier giveChange () {
        tvm.rawReserve(address(this).balance - msg.value, 2);
        _;
        msg.sender.transfer(0, false, 128);
    }

    modifier receiversIsValid(Receiver[] receivers) {
        require(receivers.length <= MAXIMUM_RECEIVERS, TOO_MUCH_RECEIVERS_ERROR);
        uint64 total;
        for (uint8 i; i < receivers.length; i++)
            total += receivers[i].share;
        require(total == VALID_RECEIVERS_TOTAL_SHARE, INVALID_RECEIVERS_TOTAL_SHARE_ERROR);
        _;
    }

    ///////////////
    // Variables //
    ///////////////
    address private _owner;
    /**
     * 2_000_000_000 means 2   COINS for 1 TOKEN
     * 1_000_000_000 means 1   COINS for 1 TOKEN
     *   500_000_000 means 0.5 COINS for 1 TOKEN
     */
    uint128 private _ratio;
    Receiver[] private _receivers;
    address private _wallet;

    /////////////////
    // Constructor //
    /////////////////
    constructor(
        address owner,
        uint128 ratio,
        Receiver[] receivers,
        uint128 balance,
        address recipient,
        address wallet
    ) accept reserveBalance(balance, recipient) receiversIsValid(receivers) {
        _owner = owner;
        _ratio = ratio;
        _receivers = receivers;
        _wallet = wallet;
    }

    ////////////////////////////
    // External // Only owner //
    ////////////////////////////
    function changeOwner(address owner) public onlyOwner giveChange {
        _owner = owner;
    }

    function changeRatio(uint128 ratio) public onlyOwner giveChange {
        _ratio = ratio;
    }

    function changeReceivers(Receiver[] receivers) public onlyOwner giveChange receiversIsValid(receivers) {
        _receivers = receivers;
    }

    function changeWallet(address wallet) public onlyOwner giveChange {
        _wallet = wallet;
    }

    ////////////
    // Getter //
    ////////////
    function info() public view returns (address owner, uint128 ratio, Receiver[] receivers, address wallet) {
        return (_owner, _ratio, _receivers, _wallet);
    }
}
