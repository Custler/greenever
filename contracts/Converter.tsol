pragma ever-solidity >= 0.71.0;

import "./interfaces/ITokenWallet.tsol";

///////////////
// Constants //
///////////////
uint128 constant MAXIMUM_RECEIVERS = 16;
uint128 constant SHARE_100_PERCENT = 1e9;
uint128 constant RATIO_ONE_TO_ONE = 1e9;

////////////
// Errors //
////////////
uint16 constant ONLY_OWNER_ERROR = 101;
uint16 constant SHARE_IS_NOT_100_PERCENT_ERROR = 102;
uint16 constant TOO_MUCH_RECEIVERS_ERROR = 103;
uint16 constant TOO_SMALL_DEPOSIT_ERROR = 104;

////////////////////
// Transfer flags //
////////////////////
uint8 constant ALL_REMAINING_BALANCE = 128;
uint8 constant DESTROY_IF_BALANCE_IS_ZERO = 32;

////////////////
// Structures //
////////////////
struct Receiver {
    address wallet;

    /**
     * 1_000_000_000 means 100% of received COINs will be sent to the wallet
     *   500_000_000 means 50%  of received COINs will be sent to the wallet
     *   100_000_000 means 10%  of received COINs will be sent to the wallet
     */
    uint32 share;
}

/**
 * Converts COINs into TOKENs and distributes COINs between RECEIVERs.
 *
 * Legend
 *   COIN     - native blockchain coin e.g. EVER
 *   TOKEN    - TIP3 token implementation https://github.com/broxus/tip3
 *   RECEIVER - Contract address to which part of the deposited COINs is received
 *
 * TIP3 standard
 *   https://github.com/everscale-org/docs/blob/main/src/standard/TIP-3/1.md
 *   https://github.com/everscale-org/docs/blob/main/src/standard/TIP-3/2.md
 *
 * Gas
 *   Gas for TOKENs transfer and sending COINs to RECEIVERs is taken from customer message
 */
contract Converter {
    ////////////
    // Events //
    ////////////
    event TokenTransferFailed(uint128 amount);

    ///////////////
    // Modifiers //
    ///////////////
    modifier accept {
        tvm.accept();
        _;
    }

    modifier onlyOwner {
        require(_owner == msg.sender, ONLY_OWNER_ERROR);
        _;
    }

    modifier reserveBalance (uint128 balance, address recipient) {
        tvm.rawReserve(balance, 2);
        _;
        recipient.transfer(0, false, ALL_REMAINING_BALANCE);
    }

    modifier giveChange () {
        tvm.rawReserve(address(this).balance - msg.value, 2);
        _;
        msg.sender.transfer(0, false, ALL_REMAINING_BALANCE);
    }

    modifier receiversIsValid(Receiver[] receivers) {
        require(receivers.length <= MAXIMUM_RECEIVERS, TOO_MUCH_RECEIVERS_ERROR);
        uint64 share;
        for (uint8 i; i < receivers.length; i++)
            share += receivers[i].share;
        require(share == SHARE_100_PERCENT, SHARE_IS_NOT_100_PERCENT_ERROR);
        _;
    }

    modifier depositIsEnough(uint128 value) {
        require(value >= _minDeposit, TOO_SMALL_DEPOSIT_ERROR);
        _;
    }

    ///////////////
    // Variables //
    ///////////////
    address private _owner;
    Receiver[] private _receivers;
    address private _wallet;
    uint128 private _minDeposit;
    uint128 private _coinsTransferValue;
    uint128 private _tokensTransferValue;
    uint128 private _tokenWalletDeployValue;

    /**
     * 2_000_000_000 means 2   COINS for 1 TOKEN
     * 1_000_000_000 means 1   COINS for 1 TOKEN
     *   500_000_000 means 0.5 COINS for 1 TOKEN
     */
    uint128 private _ratio;

    /////////////////
    // Constructor //
    /////////////////
    constructor(
        address owner,
        Receiver[] receivers,
        address wallet,
        uint128 minDeposit,
        uint128 coinsTransferValue,
        uint128 tokensTransferValue,
        uint128 tokenWalletDeployValue,
        uint128 ratio,
        uint128 balance,
        address recipient
    ) accept reserveBalance(balance, recipient) receiversIsValid(receivers) {
        _owner = owner;
        _receivers = receivers;
        _wallet = wallet;
        _minDeposit = minDeposit;
        _coinsTransferValue = coinsTransferValue;
        _tokensTransferValue = tokensTransferValue;
        _tokenWalletDeployValue = tokenWalletDeployValue;
        _ratio = ratio;
    }

    /////////////////////////
    // External // Receive //
    /////////////////////////
    receive() external view depositIsEnough(msg.value) {
        uint128 availableCoins = address(this).balance - _coinsTransferValue * MAXIMUM_RECEIVERS - _tokensTransferValue;

        for (uint8 i = 0; i < _receivers.length; i++) {
            Receiver receiver = _receivers[i];
            uint128 value = math.muldiv(availableCoins, receiver.share, SHARE_100_PERCENT);
            receiver.wallet.transfer(value, false, 1);
        }

        uint128 amount = math.muldiv(msg.value, RATIO_ONE_TO_ONE, _ratio);
        _withdrawToken(msg.sender, amount, _tokensTransferValue, _tokenWalletDeployValue);
    }

    onBounce(TvmSlice body) external pure {
        uint32 functionId = uint32(body.loadUint(32));
        if (functionId == tvm.functionId(ITokenWallet.transfer)) {
            uint128 amount = uint128(body.loadUint(128));
            emit TokenTransferFailed(amount);
        }
    }

    function up() external view {
        // Do nothing to up contract balance
    }

    ////////////////////////////
    // External // Only owner //
    ////////////////////////////
    function terminate(address destination) external view onlyOwner {
        destination.transfer(0, false, ALL_REMAINING_BALANCE + DESTROY_IF_BALANCE_IS_ZERO);
    }

    function withdrawTokens(address destination, uint128 amount) external view onlyOwner giveChange {
        uint128 tokenTransferValue = gasToValue(_tokensTransferValue);
        uint128 tokenWalletDeployValue = gasToValue(_tokenWalletDeployValue);
        _withdrawToken(destination, amount, tokenTransferValue, tokenWalletDeployValue);
    }

    function drain(address destination, uint128 remainBalance) external view onlyOwner {
        tvm.rawReserve(remainBalance, 2);
        destination.transfer(0, false, ALL_REMAINING_BALANCE);
    }

    function setOwner(address owner) external onlyOwner giveChange {
        _owner = owner;
    }

    function setRatio(uint128 ratio) external onlyOwner giveChange {
        _ratio = ratio;
    }

    function setReceivers(Receiver[] receivers) external onlyOwner giveChange receiversIsValid(receivers) {
        _receivers = receivers;
    }

    function setWallet(address wallet) external onlyOwner giveChange {
        _wallet = wallet;
    }

    function setMinDeposit(uint128 minDeposit) external onlyOwner giveChange {
        _minDeposit = minDeposit;
    }

    function setCoinsTransferValue(uint128 coinsTransferValue) external onlyOwner giveChange {
        _coinsTransferValue = coinsTransferValue;
    }

    function setTokensTransferValue(uint128 tokensTransferValue) external onlyOwner giveChange {
        _tokensTransferValue = tokensTransferValue;
    }

    function setTokenWalletDeployValue(uint128 tokenWalletDeployValue) external onlyOwner giveChange {
        _tokenWalletDeployValue = tokenWalletDeployValue;
    }

    /////////////
    // Getters //
    /////////////
    function info() public view returns (
        address owner,
        Receiver[] receivers,
        address wallet,
        uint128 minDeposit,
        uint128 coinsTransferValue,
        uint128 tokensTransferValue,
        uint128 tokenWalletDeployValue,
        uint128 ratio
    ) {
        return (
            _owner,
            _receivers,
            _wallet,
            _minDeposit,
            _coinsTransferValue,
            _tokensTransferValue,
            _tokenWalletDeployValue,
            _ratio
        );
    }

    //////////////
    // Internal //
    //////////////
    function _withdrawToken(
        address destination,
        uint128 amount,
        uint128 tokenTransferValue,
        uint128 tokenWalletDeployValue
    ) private view {
        ITokenWallet(_wallet).transfer{ value: tokenTransferValue, flag: 0, bounce: true }(
            amount,
            destination,
            tokenWalletDeployValue,
            msg.sender,
            false,
            TvmCell()
        );
    }
}
